import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    ext {
        kotlinVersion = "1.2.0"
        springBootVersion = "2.0.0.M7"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/libs-milestone" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "com.bmuschko:gradle-docker-plugin:3.2.1"
    }
}

plugins {
    id "net.researchgate.release" version "2.6.0"
    id "com.moowork.node" version "1.2.0"
    id "net.ltgt.apt" version "0.10"
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "idea"
apply plugin: "jacoco"
apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "org.springframework.boot"
apply plugin: "com.bmuschko.docker-remote-api"

group "io.zhudy.duic"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/libs-milestone" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8"
    compile "org.jetbrains.kotlin:kotlin-reflect"

    compile("org.springframework.boot:spring-boot-starter-webflux:$springBootVersion") {
        exclude module: "netty-transport-native-epoll"
    }
    compile "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:$springBootVersion"
    compile "io.netty:netty-transport-native-epoll:4.1.17.Final:linux-x86_64"
    // AbstractSubscription

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.1"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.9.1"
    compile "joda-time:joda-time:2.9.9"
    compile "org.hashids:hashids:1.0.3"
    compile "com.auth0:java-jwt:3.3.0"
    compile "org.springframework.security:spring-security-crypto:5.0.0.RELEASE"

    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testCompile "io.projectreactor:reactor-test:3.1.2.RELEASE"
    apt "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
}

[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileJava.dependsOn(processResources)

jacoco {
    toolVersion = '0.7.9'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

node {
    version = "7.7.1"
    npmVersion = "4.1.2"
    download = true
}

task buildAdmin(type: NpmTask, dependsOn: npmInstall) {
    group = "node"
    args = ["run", "build"]
}

task copyAdminFiles(type: Copy, dependsOn: buildAdmin) {
    group = "node"
    from "dist/dist"
    include "*"
    into "${project.buildDir}/resources/main/public-web-resources"
}
processResources.dependsOn copyAdminFiles

task copyDockerJar(type: Copy, dependsOn: build) {
    group = "docker"
    from jar.archivePath.path
    into "${project.buildDir}/docker"
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task createDockerfile(type: Dockerfile, dependsOn: copyDockerJar) {
    group = "docker"
    def jarName = "${project.name}.jar".toString()
    destFile = project.file("${project.buildDir}/docker/Dockerfile")

    from "openjdk:8-jdk-alpine"
    maintainer "Kevin Zou <kevinz@weghst.com>"
    copyFile(jarName, "/app/$jarName".toString())
    workingDir("/app")
    volume("/app/logs")
    environmentVariable("JAVA_OPTS", "-server -XX:+HeapDumpOnOutOfMemoryError -XX:+PrintGCDetails -Xloggc:logs/gc.log")
    exposePort(7777)
    entryPoint("java", "-jar", jarName, "\$JAVA_OPTS")
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    group = "docker"
    inputDir = createDockerfile.destFile.parentFile
    tags = ["zhudyos/${project.name}:${project.version}".toString(), "zhudyos/${project.name}:latest".toString()]
}